// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  // Class Teacher specific fields
  classId   String? @db.ObjectId
  class     Class?  @relation("ClassTeacher", fields: [classId], references: [id])

  // Parent specific fields
  children Student[] @relation("ParentChildren")

  // Audit fields
  createdStudents Student[] @relation("CreatedBy")
  updatedStudents Student[] @relation("UpdatedBy")
  createdMarks    Mark[]    @relation("MarksCreatedBy")
  createdAttendance Attendance[] @relation("AttendanceCreatedBy")
  recordedDailyAttendance DailyAttendance[] @relation("DailyAttendanceRecordedBy")

  createdAppointments Appointment[] @relation("CreatedBy")
  createdWebsiteAdmins WebsiteAdmin[] @relation("CreatedBy")
  createdWebsiteEvents WebsiteEvent[] @relation("CreatedBy")
  createdWebsiteNews WebsiteNews[] @relation("CreatedBy")
  createdWebsitePrefects WebsitePrefect[] @relation("CreatedBy")
  createdWebsiteSliders WebsiteSlider[] @relation("CreatedBy")
  createdWebsiteStaff WebsiteStaff[] @relation("CreatedBy")
  createdWebsiteStudents WebsiteStudent[] @relation("CreatedBy")
  
  // Timetable relations
  createdTimetables Timetable[] @relation("TimetableCreatedBy")
  createdVisitors Visitor[] @relation("VisitorCreatedBy")

  // Admission relations
  createdAdmissions Admission[] @relation("AdmissionCreatedBy")
  parentAdmissions Admission[] @relation("AdmissionParent")
  approvedAdmissions Admission[] @relation("AdmissionApprovedBy")

  // Add this line to the existing relations
  createdPortalAccess PortalAccess[] @relation("PortalAccessCreatedBy")

  @@map("users")
}

enum UserRole {
  ADMIN
  HEADTEACHER
  CLASS_TEACHER
  PARENT
  SECRETARY
  TEACHER_ON_DUTY
  DIRECTOR_OF_STUDIES
  RECEPTIONIST
  WEBSITE_ADMIN
}

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  year      String   @unique
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  terms     Term[]
  students  Student[]
  classes   Class[]
  marks     Mark[]
  attendance Attendance[]
  subjectTeachers SubjectTeacher[]
  subjects  Subject[] @relation("SubjectAcademicYear")
  nextTermSchedules NextTermSchedule[]
  reportCards ReportCard[] @relation("ReportCardAcademicYear")
  timetables Timetable[]
  admissions Admission[]

  @@map("academic_years")
}

model Class {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  academicYearId String?     @db.ObjectId
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  classTeachers User[]      @relation("ClassTeacher")
  students     Student[]
  subjects     Subject[]
  marks        Mark[]
  attendance   Attendance[]
  subjectTeachers SubjectTeacher[]
  dailyAttendance DailyAttendance[]
  timetableEntries TimetableEntry[]
  admissions   Admission[]

  @@map("classes")
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String?
  category  SubjectCategory @default(GENERAL)
  classId   String?  @db.ObjectId
  class     Class?   @relation(fields: [classId], references: [id])
  academicYearId String? @db.ObjectId
  academicYear   AcademicYear? @relation("SubjectAcademicYear", fields: [academicYearId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  marks Mark[]
  subjectTeachers SubjectTeacher[]
  timetableEntries TimetableEntry[]

  @@map("subjects")
}

enum SubjectType {
  CORE
  ELECTIVE
  EXTRA_CURRICULAR
}

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  qualification String?
  experience Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subject assignments
  subjectAssignments SubjectTeacher[]
  timetableEntries TimetableEntry[]

  @@map("teachers")
}

model SubjectTeacher {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  teacherId      String      @db.ObjectId
  teacher        Teacher     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subjectId      String      @db.ObjectId
  subject        Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classId        String      @db.ObjectId
  class          Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  termId         String      @db.ObjectId
  term           Term        @relation(fields: [termId], references: [id], onDelete: Cascade)
  academicYearId String      @db.ObjectId
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([subjectId, classId, termId, academicYearId])
  @@map("subject_teachers")
}

model Term {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean     @default(false)
  academicYearId String?     @db.ObjectId
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  students   Student[]
  marks      Mark[]
  attendance Attendance[]
  subjectTeachers SubjectTeacher[]
  nextTermSchedules NextTermSchedule[]
  reportCards ReportCard[] @relation("ReportCardTerm")
  timetables Timetable[]
  admissions Admission[]

  @@map("terms")
}

model Student {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String?
  dateOfBirth        DateTime?
  gender             Gender?
  age                Int?
  address            String?
  phone              String?
  photo              String?
  emergencyContact   String?
  medicalInfo        String?
  registrationNumber String?     @unique
  classId            String?     @db.ObjectId
  class              Class?      @relation(fields: [classId], references: [id])
  termId             String?     @db.ObjectId
  term               Term?       @relation(fields: [termId], references: [id])
  academicYearId     String?     @db.ObjectId
  academicYear       AcademicYear? @relation(fields: [academicYearId], references: [id])
  parentId           String?     @db.ObjectId
  parent             User?       @relation("ParentChildren", fields: [parentId], references: [id])
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  createdById        String?     @db.ObjectId
  createdBy          User?       @relation("CreatedBy", fields: [createdById], references: [id])
  updatedById        String?     @db.ObjectId
  updatedBy          User?       @relation("UpdatedBy", fields: [updatedById], references: [id])

  marks      Mark[]
  attendance Attendance[]
  reportCards ReportCard[]

  @@map("students")
}

enum Gender {
  MALE
  FEMALE
}

model Mark {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String?     @db.ObjectId
  student        Student?    @relation(fields: [studentId], references: [id])
  subjectId      String?     @db.ObjectId
  subject        Subject?    @relation(fields: [subjectId], references: [id])
  classId        String?     @db.ObjectId
  class          Class?      @relation(fields: [classId], references: [id])
  termId         String?     @db.ObjectId
  term           Term?       @relation(fields: [termId], references: [id])
  academicYearId String?     @db.ObjectId
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  
  homework       Float?
  bot            Float?
  midterm        Float?
  eot            Float?
  total          Float?
  grade          String?
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdById    String?     @db.ObjectId
  createdBy      User?       @relation("MarksCreatedBy", fields: [createdById], references: [id])

  @@map("marks")
}

model Attendance {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String?     @db.ObjectId
  student        Student?    @relation(fields: [studentId], references: [id])
  classId        String?     @db.ObjectId
  class          Class?      @relation(fields: [classId], references: [id])
  termId         String?     @db.ObjectId
  term           Term?       @relation(fields: [termId], references: [id])
  academicYearId String?     @db.ObjectId
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  
  date           DateTime?
  status         AttendanceStatus?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdById    String?     @db.ObjectId
  createdBy      User?       @relation("AttendanceCreatedBy", fields: [createdById], references: [id])

  @@map("attendance")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model ReportCard {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId             String?  @db.ObjectId
  student               Student? @relation(fields: [studentId], references: [id])
  termId                String?  @db.ObjectId
  term                  Term?    @relation("ReportCardTerm", fields: [termId], references: [id])
  academicYearId        String?  @db.ObjectId
  academicYear          AcademicYear? @relation("ReportCardAcademicYear", fields: [academicYearId], references: [id])
  
  discipline            String?
  cleanliness           String?
  classWorkPresentation String?
  adherenceToSchool     String?
  coCurricularActivities String?
  considerationToOthers String?
  speakingEnglish       String?
  
  classTeacherComment   String?
  midtermTeacherComment String?
  eotTeacherComment     String?
  
  headteacherComment    String?
  midtermHeadteacherComment String?
  eotHeadteacherComment String?
  
  isApproved            Boolean  @default(false)
  approvedAt            DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([studentId, termId, academicYearId])
  @@map("report_cards")
}

model DailyAttendance {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime    @default(now())
  classId        String      @db.ObjectId
  class          Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  present        Int         @default(0)
  absent         Int         @default(0)
  totalStudents  Int         @default(0)
  recordedById   String?     @db.ObjectId
  recordedBy     User?       @relation("DailyAttendanceRecordedBy", fields: [recordedById], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([date, classId])
  @@map("daily_attendance")
}

model PortalAccess {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  isEnabled   Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime
  startTime   String   // Format: "HH:mm" (e.g., "08:00")
  endTime     String   // Format: "HH:mm" (e.g., "17:00")
  allowedDays String[] @default(["monday", "tuesday", "wednesday", "thursday", "friday"])
  message     String   @default("Portal access is currently restricted. Please contact the Director of Studies for assistance.")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?  @db.ObjectId
  createdBy   User?    @relation("PortalAccessCreatedBy", fields: [createdById], references: [id])

  @@map("portal_access")
}

model Timetable {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           TimetableType
  academicYearId String      @db.ObjectId
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  termId         String?     @db.ObjectId
  term           Term?       @relation(fields: [termId], references: [id])
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdById    String?     @db.ObjectId
  createdBy      User?       @relation("TimetableCreatedBy", fields: [createdById], references: [id])

  entries TimetableEntry[]

  @@map("timetables")
}

model TimetableEntry {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  timetableId String    @db.ObjectId
  timetable   Timetable @relation(fields: [timetableId], references: [id], onDelete: Cascade)
  dayOfWeek   DayOfWeek
  timeSlot    String    // e.g., "8:30AM", "9:30AM-10:30AM"
  classId     String?   @db.ObjectId
  class       Class?    @relation(fields: [classId], references: [id])
  subjectId   String?   @db.ObjectId
  subject     Subject?  @relation(fields: [subjectId], references: [id])
  teacherId   String?   @db.ObjectId
  teacher     Teacher?  @relation(fields: [teacherId], references: [id])
  venue       String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("timetable_entries")
}

enum ReportCardStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  PUBLISHED
}

model NextTermSchedule {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  academicYearId String      @db.ObjectId
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  termId         String      @db.ObjectId
  term           Term        @relation(fields: [termId], references: [id], onDelete: Cascade)
  nextTermStartDate DateTime?
  nextTermEndDate   DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([academicYearId, termId])
  @@map("next_term_schedules")
}

model GradingSystem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  grade       String
  minMark     Float?
  maxMark     Float?
  comment     String?
  isActive    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  grades Grade[] @relation(name: "GradingSystemGrades")

  @@map("grading_system")
}

model Grade {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  gradingSystemId String   @db.ObjectId
  grade           String
  minMark         Float
  maxMark         Float
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  gradingSystem GradingSystem @relation(name: "GradingSystemGrades", fields: [gradingSystemId], references: [id]) // Explicitly named relation

  @@map("grades")
}


model Visitor {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  phone           String?
  email           String?
  idNumber        String?
  company         String?
  purposeOfVisit  String
  personToVisit   String
  department      String?
  checkInTime     DateTime    @default(now())
  checkOutTime    DateTime?
  status          VisitorStatus @default(CHECKED_IN)
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdById     String?     @db.ObjectId
  createdBy       User?       @relation("VisitorCreatedBy", fields: [createdById], references: [id])

  @@map("visitors")
}

enum VisitorStatus {
  CHECKED_IN
  CHECKED_OUT
  OVERSTAYED
}

model Admission {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  admissionNumber    String      @unique
  
  // Student Information
  studentName        String
  dateOfBirth        DateTime
  age                Int?
  gender             Gender
  classId            String      @db.ObjectId
  class              Class       @relation(fields: [classId], references: [id])
  termId             String      @db.ObjectId
  term               Term        @relation(fields: [termId], references: [id])
  academicYearId     String      @db.ObjectId
  academicYear       AcademicYear @relation(fields: [academicYearId], references: [id])
  residence          String?
  emisNumber         String?     // For transfers from other schools
  medicalInfo        String?
  
  // Parent/Guardian Information
  parentName         String
  parentEmail        String
  parentPhone        String
  relationshipToChild String
  parentAddress      String?
  village            String?
  lc1                String?
  ninNumber          String?
  
  // Next of Kin Information
  nextOfKinName      String?
  nextOfKinGender    Gender?
  nextOfKinPhone     String?
  nextOfKinRelation  String?
  nextOfKinAddress   String?
  nextOfKinVillage   String?
  nextOfKinLc1       String?
  
  // Payment Information
  admissionFee       Float       @default(50000)
  paymentStatus      PaymentStatus @default(PENDING)
  paymentMethod      String?
  merchantCode       String?
  transactionId      String?
  paidAt             DateTime?
  
  // Status and Approval
  status             AdmissionStatus @default(PENDING)
  approvedAt         DateTime?
  approvedById       String?         @db.ObjectId
  approvedBy         User?           @relation("AdmissionApprovedBy", fields: [approvedById], references: [id])
  rejectedAt         DateTime?
  rejectedReason     String?
  
  // Student Transfer Information
  studentId          String?         @db.ObjectId // Reference to created student record
  transferredAt      DateTime?       // When data was transferred to student
  
  // Relations
  parentId           String?         @db.ObjectId
  parent             User?           @relation("AdmissionParent", fields: [parentId], references: [id])
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  createdById        String?         @db.ObjectId
  createdBy          User?           @relation("AdmissionCreatedBy", fields: [createdById], references: [id])

  @@map("admissions")
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
  TRANSFERRED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Appointment {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  visitorName   String
  visitorEmail  String?
  visitorPhone  String?
  purpose       String
  department    String?
  appointmentDate DateTime
  appointmentTime String
  duration      Int?              // in minutes
  status        AppointmentStatus @default(SCHEDULED)
  hostName      String?
  hostContact   String?
  remarks       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  createdBy     String?           @db.ObjectId

  // Relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Website Admin Models
model WebsiteAdmin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  name        String
  message     String
  description String
  photos      String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  @db.ObjectId

  // Relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("website_admins")
}

model WebsiteEvent {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  activity    String
  description String
  date        String
  place       String
  photos      String[]            @default([])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdBy   String?             @db.ObjectId

  // Relations
  creator  User?                  @relation("CreatedBy", fields: [createdBy], references: [id])
  comments WebsiteEventComment[]

  @@map("website_events")
}

model WebsiteEventComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  name      String?
  email     String?
  comment   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())

  // Relations
  event WebsiteEvent @relation(fields: [eventId], references: [id])

  @@map("website_event_comments")
}

model WebsiteNews {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  photos      String[]           @default([])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String?            @db.ObjectId

  // Relations
  creator  User?                  @relation("CreatedBy", fields: [createdBy], references: [id])
  comments WebsiteNewsComment[]

  @@map("website_news")
}

model WebsiteNewsComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  newsId    String   @db.ObjectId
  name      String?
  email     String?
  comment   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())

  // Relations
  news WebsiteNews @relation(fields: [newsId], references: [id])

  @@map("website_news_comments")
}

model WebsitePrefect {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  gender    String
  title     String
  grade     String?
  residence String?
  photo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  @db.ObjectId

  // Relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("website_prefects")
}

model WebsiteSlider {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  photo       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  @db.ObjectId

  // Relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("website_sliders")
}

model WebsiteStaff {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  staffType String
  photo     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  @db.ObjectId

  // Relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("website_staff")
}

model WebsiteStudent {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  stid         String   @unique
  gender       String
  grade        String?
  residence    String?
  paymentCode  Int
  parentName   String?
  parentEmail  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?  @db.ObjectId

  // Relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("website_students")
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())

  @@map("contacts")
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("newsletters")
}
enum SubjectCategory {
  GENERAL
  SUBSIDIARY
}

enum TimetableType {
  REGULAR_CLASSES
  HOMEWORK
  EXAMINATION
  EVENTS
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}